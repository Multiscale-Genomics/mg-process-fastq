#!/usr/bin/env python

"""
.. See the NOTICE file distributed with this work for additional information
   regarding copyright ownership.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import print_function

import argparse

from basic_modules.workflow import Workflow
from basic_modules.metadata import Metadata
from utils import remap

from tool.fastq_splitter import fastq_splitter
from tool.bs_seeker_aligner import bssAlignerTool
from tool.bs_seeker_filter import filterReadsTool
from tool.bs_seeker_indexer import bssIndexerTool
from tool.bs_seeker_methylation_caller import bssMethylationCallerTool

# ------------------------------------------------------------------------------

class process_wgbs(Workflow):
    """
    Functions for downloading and processing whole genome bisulfate sequencings
    (WGBS) files. Files are filtered, aligned and analysed for points of
    methylation
    """

    configuration = {}

    def __init__(self, configuration=None):
        """
        Initialise the tool with its configuration.


        Parameters
        ----------
        configuration : dict
            a dictionary containing parameters that define how the operation
            should be carried out, which are specific to each Tool.
        """
        if configuration is None:
            configuration = {}
        self.configuration.update(configuration)

    def run(self, input_files, metadata, output_files):
        """
        This pipeline processes paired-end FASTQ files to identify
        methylated regions within the genome.

        Parameters
        ----------
        input_files : list
            List of strings for the locations of files. These should include:

            genome_fa : str
                Genome assembly in FASTA
            fastq1 : str
                FASTQ file for the first pair end file
            fastq2 : str
                FASTQ file for the second pair end file

        Returns
        -------
        wig_file : str
            Location of the wig file containing the methylation peak calls
        cgmap_file : str
            Location of the CGmap file generated by BS-Seeker2
        atcgmap_file : str
            Location of the ATCGmap file generated by BS-Seeker2
        """
        #genome_fa = input_files[0]
        #fastq1 = input_files[1]
        #fastq2 = input_files[2]

        #fq_split = fastq1.split("/")
        #expt_name = re.sub('_1.fastq', '', fq_split[-1])

        output_results_files = {}
        output_metadata = {}

        print("PIPELINE - metadata:", metadata)

        if "bss_path" in self.configuration:
            metadata["bss_path"] = self.configuration["bss_path"]
        if "aligner_path" in self.configuration:
            metadata["aligner_path"] = self.configuration["aligner_path"]
        if "aligner" in self.configuration:
            metadata["aligner"] = self.configuration["aligner"]

        # Filter the FASTQ reads to remove duplicates
        frt = filterReadsTool()
        fastq1f, filter1_meta = frt.run(
            {"fastq": input_files["fastq1"]},
            {"fastq": metadata["fastq1"]},
            {"fastq_filtered": output_files["fastq1_filtered"]}
        )

        output_results_files["fastq1_filtered"] = fastq1f["fastq_filtered"]
        output_metadata["fastq1_filtered"] = filter1_meta["fastq_filtered"]

        # Build the matching WGBS genome index
        builder = bssIndexerTool()
        genome_idx, gidx_meta = builder.run(
            remap(input_files, "genome"),
            remap(metadata, "genome"),
            remap(output_files, "genome_idx")
        )
        output_results_files['genome_idx'] = genome_idx["genome_idx"]
        output_metadata['genome_idx'] = gidx_meta["genome_idx"]

        # Split the FASTQ files into smaller, easier to align packets
        fqs = fastq_splitter()
        if "fastq2" in input_files:
            fastq2f, filter2_meta = frt.run(
                {"fastq": input_files["fastq2"]},
                {"fastq": metadata["fastq2"]},
                {"fastq_filtered": output_files["fastq2_filtered"]}
            )
            output_results_files["fastq2_filtered"] = fastq2f["fastq_filtered"]
            output_metadata['fastq2_filtered'] = filter2_meta["fastq_filtered"]

            tmp_fastq_gz, tmp_fastq_list = fqs.run(
                remap(output_files, "fastq1_filtered", "fastq2_filtered"),
                {},
                remap(output_metadata, "fastq1_filtered", "fastq2_filtered")
            )
        else:
            tmp_fastq_gz, tmp_fastq_list = fqs.run(
                remap(output_files, "fastq1_filtered"),
                {},
                remap(output_metadata, "fastq1_filtered")
            )

        print("WGBS genome_idx:", genome_idx)
        print("WGBS tmp_fastq_gz:", tmp_fastq_gz)
        print("WGBS tmp_fastq_list:", tmp_fastq_list)

        # Handles the alignment of all of the split packets then merges them
        # back together.
        bss_aligner = bssAlignerTool()
        aligner_input_files = remap(input_files, "genome", "genome_idx")
        aligner_input_files["fastq_list"] = tmp_fastq_gz

        aligner_meta = remap(output_metadata, "genome", "genome_idx")
        aligner_meta["fastq_list"] = tmp_fastq_list
        bam, bam_meta = bss_aligner.run(
            aligner_input_files,
            aligner_meta,
            remap(output_files, "bam", "bai")
        )

        output_results_files["bam"] = bam["bam"]
        output_results_files["bai"] = bam["bai"]
        output_metadata["bam"] = bam_meta["bam"]
        output_metadata["bai"] = bam_meta["bai"]

        # Methylation peak caller
        peak_caller_handle = bssMethylationCallerTool()

        peak_files, peak_meta = peak_caller_handle.run(
            remap(output_files, "bam", "bai", "genome_idx"),
            remap(output_metadata, "bam", "bai", "genome_idx"),
            remap(output_files, "wig_file", "cgmap_file", "atcgmap_file")
        )
        # output_metadata['peak_calling'] = peak_meta

        output_results_files["wig_file"] = peak_files["wig_file"]
        output_results_files["cgmap_file"] = peak_files["cgmap_file"]
        output_results_files["atcgmap_file"] = peak_files["atcgmap_file"]
        output_metadata["wig_file"] = peak_meta["wig_file"]
        output_metadata["cgmap_file"] = peak_meta["cgmap_file"]
        output_metadata["atcgmap_file"] = peak_meta["atcgmap_file"]

        return (output_results_files, output_metadata)

# ------------------------------------------------------------------------------

def main_json(config, in_metadata, out_metadata):
    """
    Alternative main function
    -------------

    This function launches the app using configuration written in
    two json files: config.json and input_metadata.json.
    """
    # 1. Instantiate and launch the App
    print("1. Instantiate and launch the App")
    from apps.jsonapp import JSONApp
    app = JSONApp()
    result = app.launch(process_wgbs,
                        config,
                        in_metadata,
                        out_metadata)

    # 2. The App has finished
    print("2. Execution finished; see " + out_metadata)
    print(result)

    return result

# ------------------------------------------------------------------------------

if __name__ == "__main__":
    import sys
    sys._run_from_cmdl = True

    # Set up the command line parameters
    PARSER = argparse.ArgumentParser(description="WGBS peak calling")
    PARSER.add_argument("--config", help="Configuration file")
    PARSER.add_argument("--in_metadata", help="Location of input metadata file")
    PARSER.add_argument("--out_metadata", help="Location of output metadata file")

    # Get the matching parameters from the command line
    ARGS = PARSER.parse_args()

    CONFIG = ARGS.config
    IN_METADATA = ARGS.in_metadata
    OUT_METADATA = ARGS.out_metadata

    RESULTS = main_json(CONFIG, IN_METADATA, OUT_METADATA)

    print(RESULTS)
